
LaserSensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000130  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000048  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000032d  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001bb  00000000  00000000  00000529  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000250  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000074  00000000  00000000  00000934  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001ce  00000000  00000000  000009a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000a4  00000000  00000000  00000b76  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000038  00000000  00000000  00000c1a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	23 d0       	rcall	.+70     	; 0xe0 <main>
  9a:	48 c0       	rjmp	.+144    	; 0x12c <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <uart_init>:
	while (!(UCSR0A & (1 << UDRE0)));
	UDR0 = data;
}

void send_data(unsigned char stat){
	uart_write(stat);
  9e:	90 93 90 00 	sts	0x0090, r25
  a2:	89 b9       	out	0x09, r24	; 9
  a4:	88 e1       	ldi	r24, 0x18	; 24
  a6:	8a b9       	out	0x0a, r24	; 10
  a8:	08 95       	ret

000000aa <uart_write>:
  aa:	5d 9b       	sbis	0x0b, 5	; 11
  ac:	fe cf       	rjmp	.-4      	; 0xaa <uart_write>
  ae:	8c b9       	out	0x0c, r24	; 12
  b0:	08 95       	ret

000000b2 <ADC_Init>:
}


void ADC_Init()
{
	DDRF = 0x00;
  b2:	10 92 61 00 	sts	0x0061, r1
	ADCSRA = 0x87;
  b6:	87 e8       	ldi	r24, 0x87	; 135
  b8:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0x40;
  ba:	80 e4       	ldi	r24, 0x40	; 64
  bc:	87 b9       	out	0x07, r24	; 7
  be:	08 95       	ret

000000c0 <ADC_Read>:
}
int ADC_Read(char channel)
{
	//int ADC_value;
	
	ADMUX = (0x40) | (channel & 0x07);
  c0:	87 70       	andi	r24, 0x07	; 7
  c2:	80 64       	ori	r24, 0x40	; 64
  c4:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	87 ec       	ldi	r24, 0xC7	; 199
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <ADC_Read+0xa>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <ADC_Read+0x10>
  d0:	00 00       	nop
	_delay_us(50);
	ADCSRA |= (1<<ADSC);
  d2:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA &(1<<ADIF))== 0);
  d4:	34 9b       	sbis	0x06, 4	; 6
  d6:	fe cf       	rjmp	.-4      	; 0xd4 <ADC_Read+0x14>
	
	ADCSRA |= (1<<ADIF);
  d8:	34 9a       	sbi	0x06, 4	; 6
	return ADCW;
  da:	84 b1       	in	r24, 0x04	; 4
  dc:	95 b1       	in	r25, 0x05	; 5
}
  de:	08 95       	ret

000000e0 <main>:

int main(void)
{
	int cds;
	ADC_Init();
  e0:	e8 df       	rcall	.-48     	; 0xb2 <ADC_Init>
	uart_init(BAUDRATE(9600));
  e2:	87 e6       	ldi	r24, 0x67	; 103
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	db df       	rcall	.-74     	; 0x9e <uart_init>
	DDRA = 0xff;
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	8a bb       	out	0x1a, r24	; 26
	DDRF = 0x00; // cds
  ec:	10 92 61 00 	sts	0x0061, r1
	DDRB = 0xff; // laser
  f0:	87 bb       	out	0x17, r24	; 23
	
	RGB(G);
  f2:	82 e0       	ldi	r24, 0x02	; 2
  f4:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f6:	2f ef       	ldi	r18, 0xFF	; 255
  f8:	8b e7       	ldi	r24, 0x7B	; 123
  fa:	92 e9       	ldi	r25, 0x92	; 146
  fc:	21 50       	subi	r18, 0x01	; 1
  fe:	80 40       	sbci	r24, 0x00	; 0
 100:	90 40       	sbci	r25, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <main+0x1c>
 104:	00 c0       	rjmp	.+0      	; 0x106 <main+0x26>
 106:	00 00       	nop
	while (!(UCSR0A & (1 << UDRE0)));
	UDR0 = data;
}

void send_data(unsigned char stat){
	uart_write(stat);
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	cf df       	rcall	.-98     	; 0xaa <uart_write>
	while(1)
    {
        //TODO:: Please write your application code
		cds = ADC_Read(0);
		
		PORTB = BV(0);
 10c:	c1 e0       	ldi	r28, 0x01	; 1
		if(cds > 80) {
			RGB(R);
			send_data(INTRUSION);
		}
		else {
			RGB(B);
 10e:	d4 e0       	ldi	r29, 0x04	; 4
	_delay_ms(3000);
	send_data(TURNON);
	while(1)
    {
        //TODO:: Please write your application code
		cds = ADC_Read(0);
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	d6 df       	rcall	.-84     	; 0xc0 <ADC_Read>
		
		PORTB = BV(0);
 114:	c8 bb       	out	0x18, r28	; 24
		
		if(cds > 80) {
 116:	81 35       	cpi	r24, 0x51	; 81
 118:	91 05       	cpc	r25, r1
 11a:	24 f0       	brlt	.+8      	; 0x124 <main+0x44>
			RGB(R);
 11c:	cb bb       	out	0x1b, r28	; 27
	while (!(UCSR0A & (1 << UDRE0)));
	UDR0 = data;
}

void send_data(unsigned char stat){
	uart_write(stat);
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	c4 df       	rcall	.-120    	; 0xaa <uart_write>
 122:	f6 cf       	rjmp	.-20     	; 0x110 <main+0x30>
		if(cds > 80) {
			RGB(R);
			send_data(INTRUSION);
		}
		else {
			RGB(B);
 124:	db bb       	out	0x1b, r29	; 27
	while (!(UCSR0A & (1 << UDRE0)));
	UDR0 = data;
}

void send_data(unsigned char stat){
	uart_write(stat);
 126:	8c 2f       	mov	r24, r28
 128:	c0 df       	rcall	.-128    	; 0xaa <uart_write>
 12a:	f2 cf       	rjmp	.-28     	; 0x110 <main+0x30>

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>
