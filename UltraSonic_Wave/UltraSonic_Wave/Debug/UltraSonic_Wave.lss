
UltraSonic_Wave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000024a  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000030  00000000  00000000  0000027a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000238  00000000  00000000  000002aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000120  00000000  00000000  000004e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000278  00000000  00000000  00000602  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000044  00000000  00000000  0000087c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001b9  00000000  00000000  000008c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000026  00000000  00000000  00000a79  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000020  00000000  00000000  00000a9f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	12 d0       	rcall	.+36     	; 0xbe <main>
  9a:	ab c0       	rjmp	.+342    	; 0x1f2 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <uart_init>:

#define BV(bit) (1 << bit)

void uart_init(unsigned int baud)
{
	UBRR1H = (unsigned char)(baud >> 8);
  9e:	90 93 98 00 	sts	0x0098, r25
	UBRR1L = (unsigned char)baud;
  a2:	80 93 99 00 	sts	0x0099, r24
	UCSR1B = (1 << TXEN1) | (1 << RXEN1);
  a6:	88 e1       	ldi	r24, 0x18	; 24
  a8:	80 93 9a 00 	sts	0x009A, r24
  ac:	08 95       	ret

000000ae <uart_write>:
}

void uart_write(unsigned char data)
{
	while (!(UCSR1A & (1 << UDRE1)));
  ae:	eb e9       	ldi	r30, 0x9B	; 155
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	90 81       	ld	r25, Z
  b4:	95 ff       	sbrs	r25, 5
  b6:	fd cf       	rjmp	.-6      	; 0xb2 <uart_write+0x4>
	UDR1 = data;
  b8:	80 93 9c 00 	sts	0x009C, r24
  bc:	08 95       	ret

000000be <main>:
}

int main(void)
{
	uart_init(BAUDRATE(9600));
  be:	87 e6       	ldi	r24, 0x67	; 103
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	ed df       	rcall	.-38     	; 0x9e <uart_init>
	
	unsigned int distance;
	DDRC = 0x00;
  c4:	14 ba       	out	0x14, r1	; 20
	DDRE = ((DDRE | (1<<TRIG)) & ~(1<<ECHO));
  c6:	82 b1       	in	r24, 0x02	; 2
  c8:	8f 73       	andi	r24, 0x3F	; 63
  ca:	80 64       	ori	r24, 0x40	; 64
  cc:	82 b9       	out	0x02, r24	; 2
	
    while(1)
    {
        TCCR1B = 0x03;
  ce:	c3 e0       	ldi	r28, 0x03	; 3
        PORTE &= ~(1<<TRIG);
        while(!(PINE & (1<<ECHO))); 
        TCNT1 = 0x0000;
        while(PINE & (1<<ECHO));
        TCCR1B = 0x00;
        distance = (unsigned int)(SOUND_VELOCITY * (TCNT1 * 4 / 2) / 1000);
  d0:	0f 2e       	mov	r0, r31
  d2:	f8 ee       	ldi	r31, 0xE8	; 232
  d4:	cf 2e       	mov	r12, r31
  d6:	f3 e0       	ldi	r31, 0x03	; 3
  d8:	df 2e       	mov	r13, r31
  da:	e1 2c       	mov	r14, r1
  dc:	f1 2c       	mov	r15, r1
  de:	f0 2d       	mov	r31, r0
		else if(distance < 200){
			PORTC = BV(4);
			uart_write('5');
		}
		else if(distance > 200){
			PORTC = BV(5);
  e0:	68 94       	set
  e2:	99 24       	eor	r9, r9
  e4:	95 f8       	bld	r9, 5
		else if(distance < 130){
			PORTC = BV(3);
			uart_write('4');
		}
		else if(distance < 200){
			PORTC = BV(4);
  e6:	68 94       	set
  e8:	aa 24       	eor	r10, r10
  ea:	a4 f8       	bld	r10, 4
		else if(distance < 100){
			PORTC = BV(2);
			uart_write('3');
		}
		else if(distance < 130){
			PORTC = BV(3);
  ec:	68 94       	set
  ee:	bb 24       	eor	r11, r11
  f0:	b3 f8       	bld	r11, 3
		else if(distance < 70){
			PORTC = BV(1);
			uart_write('2');
		}
		else if(distance < 100){
			PORTC = BV(2);
  f2:	04 e0       	ldi	r16, 0x04	; 4
		if(distance < 30){
			PORTC = BV(0);
			uart_write('1');
		}
		else if(distance < 70){
			PORTC = BV(1);
  f4:	12 e0       	ldi	r17, 0x02	; 2
        while(PINE & (1<<ECHO));
        TCCR1B = 0x00;
        distance = (unsigned int)(SOUND_VELOCITY * (TCNT1 * 4 / 2) / 1000);
		
		if(distance < 30){
			PORTC = BV(0);
  f6:	d1 e0       	ldi	r29, 0x01	; 1
	DDRC = 0x00;
	DDRE = ((DDRE | (1<<TRIG)) & ~(1<<ECHO));
	
    while(1)
    {
        TCCR1B = 0x03;
  f8:	ce bd       	out	0x2e, r28	; 46
        PORTE &= ~(1<<TRIG);
  fa:	1e 98       	cbi	0x03, 6	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	85 e3       	ldi	r24, 0x35	; 53
  fe:	8a 95       	dec	r24
 100:	f1 f7       	brne	.-4      	; 0xfe <main+0x40>
 102:	00 00       	nop
        _delay_us(10);
        PORTE |= (1<<TRIG);
 104:	1e 9a       	sbi	0x03, 6	; 3
 106:	85 e3       	ldi	r24, 0x35	; 53
 108:	8a 95       	dec	r24
 10a:	f1 f7       	brne	.-4      	; 0x108 <main+0x4a>
 10c:	00 00       	nop
        _delay_us(10);
        PORTE &= ~(1<<TRIG);
 10e:	1e 98       	cbi	0x03, 6	; 3
        while(!(PINE & (1<<ECHO))); 
 110:	0f 9b       	sbis	0x01, 7	; 1
 112:	fe cf       	rjmp	.-4      	; 0x110 <main+0x52>
        TCNT1 = 0x0000;
 114:	1d bc       	out	0x2d, r1	; 45
 116:	1c bc       	out	0x2c, r1	; 44
        while(PINE & (1<<ECHO));
 118:	0f 99       	sbic	0x01, 7	; 1
 11a:	fe cf       	rjmp	.-4      	; 0x118 <main+0x5a>
        TCCR1B = 0x00;
 11c:	1e bc       	out	0x2e, r1	; 46
        distance = (unsigned int)(SOUND_VELOCITY * (TCNT1 * 4 / 2) / 1000);
 11e:	2c b5       	in	r18, 0x2c	; 44
 120:	3d b5       	in	r19, 0x2d	; 45
 122:	22 0f       	add	r18, r18
 124:	33 1f       	adc	r19, r19
 126:	22 0f       	add	r18, r18
 128:	33 1f       	adc	r19, r19
 12a:	36 95       	lsr	r19
 12c:	27 95       	ror	r18
 12e:	a4 e5       	ldi	r26, 0x54	; 84
 130:	b1 e0       	ldi	r27, 0x01	; 1
 132:	50 d0       	rcall	.+160    	; 0x1d4 <__umulhisi3>
 134:	a7 01       	movw	r20, r14
 136:	96 01       	movw	r18, r12
 138:	2b d0       	rcall	.+86     	; 0x190 <__udivmodsi4>
		
		if(distance < 30){
 13a:	2e 31       	cpi	r18, 0x1E	; 30
 13c:	31 05       	cpc	r19, r1
 13e:	20 f4       	brcc	.+8      	; 0x148 <main+0x8a>
			PORTC = BV(0);
 140:	d5 bb       	out	0x15, r29	; 21
			uart_write('1');
 142:	81 e3       	ldi	r24, 0x31	; 49
 144:	b4 df       	rcall	.-152    	; 0xae <uart_write>
 146:	d8 cf       	rjmp	.-80     	; 0xf8 <main+0x3a>
		}
		else if(distance < 70){
 148:	26 34       	cpi	r18, 0x46	; 70
 14a:	31 05       	cpc	r19, r1
 14c:	20 f4       	brcc	.+8      	; 0x156 <main+0x98>
			PORTC = BV(1);
 14e:	15 bb       	out	0x15, r17	; 21
			uart_write('2');
 150:	82 e3       	ldi	r24, 0x32	; 50
 152:	ad df       	rcall	.-166    	; 0xae <uart_write>
 154:	d1 cf       	rjmp	.-94     	; 0xf8 <main+0x3a>
		}
		else if(distance < 100){
 156:	24 36       	cpi	r18, 0x64	; 100
 158:	31 05       	cpc	r19, r1
 15a:	20 f4       	brcc	.+8      	; 0x164 <main+0xa6>
			PORTC = BV(2);
 15c:	05 bb       	out	0x15, r16	; 21
			uart_write('3');
 15e:	83 e3       	ldi	r24, 0x33	; 51
 160:	a6 df       	rcall	.-180    	; 0xae <uart_write>
 162:	ca cf       	rjmp	.-108    	; 0xf8 <main+0x3a>
		}
		else if(distance < 130){
 164:	22 38       	cpi	r18, 0x82	; 130
 166:	31 05       	cpc	r19, r1
 168:	20 f4       	brcc	.+8      	; 0x172 <main+0xb4>
			PORTC = BV(3);
 16a:	b5 ba       	out	0x15, r11	; 21
			uart_write('4');
 16c:	84 e3       	ldi	r24, 0x34	; 52
 16e:	9f df       	rcall	.-194    	; 0xae <uart_write>
 170:	c3 cf       	rjmp	.-122    	; 0xf8 <main+0x3a>
		}
		else if(distance < 200){
 172:	28 3c       	cpi	r18, 0xC8	; 200
 174:	31 05       	cpc	r19, r1
 176:	20 f4       	brcc	.+8      	; 0x180 <main+0xc2>
			PORTC = BV(4);
 178:	a5 ba       	out	0x15, r10	; 21
			uart_write('5');
 17a:	85 e3       	ldi	r24, 0x35	; 53
 17c:	98 df       	rcall	.-208    	; 0xae <uart_write>
 17e:	bc cf       	rjmp	.-136    	; 0xf8 <main+0x3a>
		}
		else if(distance > 200){
 180:	29 3c       	cpi	r18, 0xC9	; 201
 182:	31 05       	cpc	r19, r1
 184:	08 f4       	brcc	.+2      	; 0x188 <main+0xca>
 186:	b8 cf       	rjmp	.-144    	; 0xf8 <main+0x3a>
			PORTC = BV(5);
 188:	95 ba       	out	0x15, r9	; 21
			uart_write('6');
 18a:	86 e3       	ldi	r24, 0x36	; 54
 18c:	90 df       	rcall	.-224    	; 0xae <uart_write>
 18e:	b4 cf       	rjmp	.-152    	; 0xf8 <main+0x3a>

00000190 <__udivmodsi4>:
 190:	a1 e2       	ldi	r26, 0x21	; 33
 192:	1a 2e       	mov	r1, r26
 194:	aa 1b       	sub	r26, r26
 196:	bb 1b       	sub	r27, r27
 198:	fd 01       	movw	r30, r26
 19a:	0d c0       	rjmp	.+26     	; 0x1b6 <__udivmodsi4_ep>

0000019c <__udivmodsi4_loop>:
 19c:	aa 1f       	adc	r26, r26
 19e:	bb 1f       	adc	r27, r27
 1a0:	ee 1f       	adc	r30, r30
 1a2:	ff 1f       	adc	r31, r31
 1a4:	a2 17       	cp	r26, r18
 1a6:	b3 07       	cpc	r27, r19
 1a8:	e4 07       	cpc	r30, r20
 1aa:	f5 07       	cpc	r31, r21
 1ac:	20 f0       	brcs	.+8      	; 0x1b6 <__udivmodsi4_ep>
 1ae:	a2 1b       	sub	r26, r18
 1b0:	b3 0b       	sbc	r27, r19
 1b2:	e4 0b       	sbc	r30, r20
 1b4:	f5 0b       	sbc	r31, r21

000001b6 <__udivmodsi4_ep>:
 1b6:	66 1f       	adc	r22, r22
 1b8:	77 1f       	adc	r23, r23
 1ba:	88 1f       	adc	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	1a 94       	dec	r1
 1c0:	69 f7       	brne	.-38     	; 0x19c <__udivmodsi4_loop>
 1c2:	60 95       	com	r22
 1c4:	70 95       	com	r23
 1c6:	80 95       	com	r24
 1c8:	90 95       	com	r25
 1ca:	9b 01       	movw	r18, r22
 1cc:	ac 01       	movw	r20, r24
 1ce:	bd 01       	movw	r22, r26
 1d0:	cf 01       	movw	r24, r30
 1d2:	08 95       	ret

000001d4 <__umulhisi3>:
 1d4:	a2 9f       	mul	r26, r18
 1d6:	b0 01       	movw	r22, r0
 1d8:	b3 9f       	mul	r27, r19
 1da:	c0 01       	movw	r24, r0
 1dc:	a3 9f       	mul	r26, r19
 1de:	70 0d       	add	r23, r0
 1e0:	81 1d       	adc	r24, r1
 1e2:	11 24       	eor	r1, r1
 1e4:	91 1d       	adc	r25, r1
 1e6:	b2 9f       	mul	r27, r18
 1e8:	70 0d       	add	r23, r0
 1ea:	81 1d       	adc	r24, r1
 1ec:	11 24       	eor	r1, r1
 1ee:	91 1d       	adc	r25, r1
 1f0:	08 95       	ret

000001f2 <_exit>:
 1f2:	f8 94       	cli

000001f4 <__stop_program>:
 1f4:	ff cf       	rjmp	.-2      	; 0x1f4 <__stop_program>
