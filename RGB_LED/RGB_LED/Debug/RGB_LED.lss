
RGB_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001aa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000d  00800100  00800100  0000021e  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000021e  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  0000024e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000204  00000000  00000000  0000028e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000013e  00000000  00000000  00000492  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001d4  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000094  00000000  00000000  000007a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000019a  00000000  00000000  00000838  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000163  00000000  00000000  000009d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  00000b35  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	3c c0       	rjmp	.+120    	; 0xc2 <__vector_18>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	ad 30       	cpi	r26, 0x0D	; 13
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	71 d0       	rcall	.+226    	; 0x18c <main>
  aa:	7d c0       	rjmp	.+250    	; 0x1a6 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <uart_init>:
unsigned int Rx_buffer[5];
int USART1_rx_end = 0;

void uart_init(unsigned int baud)
{
	UBRR0H = (unsigned char)(baud >> 8);
  ae:	90 93 90 00 	sts	0x0090, r25
	UBRR0L = (unsigned char)baud;
  b2:	89 b9       	out	0x09, r24	; 9
	UCSR0B = (1 << TXEN0) | (1 << RXEN0);
  b4:	88 e1       	ldi	r24, 0x18	; 24
  b6:	8a b9       	out	0x0a, r24	; 10
  b8:	08 95       	ret

000000ba <uart_write>:
}

void uart_write(unsigned char data)
{
	while (!(UCSR0A & (1 << UDRE0)));
  ba:	5d 9b       	sbis	0x0b, 5	; 11
  bc:	fe cf       	rjmp	.-4      	; 0xba <uart_write>
	UDR0 = data;
  be:	8c b9       	out	0x0c, r24	; 12
  c0:	08 95       	ret

000000c2 <__vector_18>:
}

ISR(USART0_RX_vect){
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	2f 93       	push	r18
  ce:	8f 93       	push	r24
  d0:	9f 93       	push	r25
	static uint8_t usart1_chk = 0;
	unsigned char buf = UDR0;
  d2:	2c b1       	in	r18, 0x0c	; 12
	int USART1_len = 0;
	
	USART1_rx_end = 0;
  d4:	10 92 02 01 	sts	0x0102, r1
  d8:	10 92 01 01 	sts	0x0101, r1
	switch(usart1_chk){
  dc:	80 91 00 01 	lds	r24, 0x0100
  e0:	88 23       	and	r24, r24
  e2:	19 f0       	breq	.+6      	; 0xea <__vector_18+0x28>
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	81 f0       	breq	.+32     	; 0x108 <__vector_18+0x46>
  e8:	20 c0       	rjmp	.+64     	; 0x12a <__vector_18+0x68>
		case 0 :
			if(buf == 0x02){
  ea:	22 30       	cpi	r18, 0x02	; 2
  ec:	51 f4       	brne	.+20     	; 0x102 <__vector_18+0x40>
				Rx_buffer[USART1_len] = buf;
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	90 93 04 01 	sts	0x0104, r25
  f6:	80 93 03 01 	sts	0x0103, r24
				USART1_len++;
				usart1_chk = 1;
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	80 93 00 01 	sts	0x0100, r24
 100:	16 c0       	rjmp	.+44     	; 0x12e <__vector_18+0x6c>
			}
			else usart1_chk = 0;
 102:	10 92 00 01 	sts	0x0100, r1
 106:	13 c0       	rjmp	.+38     	; 0x12e <__vector_18+0x6c>
			break;
		case 1:
			Rx_buffer[USART1_len]= buf;
 108:	82 2f       	mov	r24, r18
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	90 93 04 01 	sts	0x0104, r25
 110:	80 93 03 01 	sts	0x0103, r24
			USART1_len++;
			
			if(buf == 0x03){
 114:	23 30       	cpi	r18, 0x03	; 3
 116:	59 f4       	brne	.+22     	; 0x12e <__vector_18+0x6c>
				USART1_rx_end = 1;
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	90 93 02 01 	sts	0x0102, r25
 120:	80 93 01 01 	sts	0x0101, r24
				usart1_chk = 0;
 124:	10 92 00 01 	sts	0x0100, r1
 128:	02 c0       	rjmp	.+4      	; 0x12e <__vector_18+0x6c>
			}
			break;
		default:
			usart1_chk = 0;
 12a:	10 92 00 01 	sts	0x0100, r1
			break;
	}
}
 12e:	9f 91       	pop	r25
 130:	8f 91       	pop	r24
 132:	2f 91       	pop	r18
 134:	0f 90       	pop	r0
 136:	0f be       	out	0x3f, r0	; 63
 138:	0f 90       	pop	r0
 13a:	1f 90       	pop	r1
 13c:	18 95       	reti

0000013e <set_rgb>:

void set_rgb(){
 13e:	0f 93       	push	r16
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
	int red, green, blue;
	if(USART1_rx_end == 1){
 146:	80 91 01 01 	lds	r24, 0x0101
 14a:	90 91 02 01 	lds	r25, 0x0102
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	c1 f4       	brne	.+48     	; 0x182 <set_rgb+0x44>
		red = Rx_buffer[1];
		OCR0 = red;
 152:	80 91 05 01 	lds	r24, 0x0105
 156:	81 bf       	out	0x31, r24	; 49
	
		green = Rx_buffer[2];
 158:	00 91 07 01 	lds	r16, 0x0107
 15c:	10 91 08 01 	lds	r17, 0x0108
		OCR1A = green;
 160:	1b bd       	out	0x2b, r17	; 43
 162:	0a bd       	out	0x2a, r16	; 42

		blue = Rx_buffer[3];
 164:	c0 91 09 01 	lds	r28, 0x0109
 168:	d0 91 0a 01 	lds	r29, 0x010A
		OCR1B = blue;
 16c:	d9 bd       	out	0x29, r29	; 41
 16e:	c8 bd       	out	0x28, r28	; 40
	
		uart_write(red);
 170:	a4 df       	rcall	.-184    	; 0xba <uart_write>
		uart_write(green);
 172:	80 2f       	mov	r24, r16
 174:	a2 df       	rcall	.-188    	; 0xba <uart_write>
		uart_write(blue);
 176:	8c 2f       	mov	r24, r28
 178:	a0 df       	rcall	.-192    	; 0xba <uart_write>
		 
		USART1_rx_end = 0;
 17a:	10 92 02 01 	sts	0x0102, r1
 17e:	10 92 01 01 	sts	0x0101, r1
	}
}
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	1f 91       	pop	r17
 188:	0f 91       	pop	r16
 18a:	08 95       	ret

0000018c <main>:

int main(void)
{
	uart_init(BAUDRATE(9600));
 18c:	87 e6       	ldi	r24, 0x67	; 103
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	8e df       	rcall	.-228    	; 0xae <uart_init>
	
	DDRB = 0xff;
 192:	8f ef       	ldi	r24, 0xFF	; 255
 194:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;
 196:	18 ba       	out	0x18, r1	; 24
	TCCR0 = 0x6A;
 198:	8a e6       	ldi	r24, 0x6A	; 106
 19a:	83 bf       	out	0x33, r24	; 51
	TCCR1A = 0x6A;
 19c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0x6A;
 19e:	8e bd       	out	0x2e, r24	; 46
	
	sei();
 1a0:	78 94       	sei
	//OCR0 = PB4
	//OCR1A = PB5
	//OCR1B = PB6
    while(1)
    {
		set_rgb();
 1a2:	cd df       	rcall	.-102    	; 0x13e <set_rgb>
 1a4:	fe cf       	rjmp	.-4      	; 0x1a2 <main+0x16>

000001a6 <_exit>:
 1a6:	f8 94       	cli

000001a8 <__stop_program>:
 1a8:	ff cf       	rjmp	.-2      	; 0x1a8 <__stop_program>
