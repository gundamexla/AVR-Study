
DC_Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000178  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000038  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001a1  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000ea  00000000  00000000  000003d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000232  00000000  00000000  000004bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000054  00000000  00000000  000006f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000151  00000000  00000000  00000748  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000070  00000000  00000000  00000899  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000028  00000000  00000000  00000909  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	1a d0       	rcall	.+52     	; 0xce <main>
  9a:	6c c0       	rjmp	.+216    	; 0x174 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <uart_init>:

// 과제 2

void uart_init(unsigned int baud)
{
	UBRR1H = (unsigned char)(baud >> 8);
  9e:	90 93 98 00 	sts	0x0098, r25
	UBRR1L = (unsigned char)baud;
  a2:	80 93 99 00 	sts	0x0099, r24
	UCSR1B = (1 << TXEN1) | (1 << RXEN1);
  a6:	88 e1       	ldi	r24, 0x18	; 24
  a8:	80 93 9a 00 	sts	0x009A, r24
  ac:	08 95       	ret

000000ae <uart_read>:
}

unsigned char uart_read()
{
	while (!(UCSR1A & (1 << RXC1)));
  ae:	eb e9       	ldi	r30, 0x9B	; 155
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	88 23       	and	r24, r24
  b6:	ec f7       	brge	.-6      	; 0xb2 <uart_read+0x4>
	return UDR1;
  b8:	80 91 9c 00 	lds	r24, 0x009C
}
  bc:	08 95       	ret

000000be <uart_write>:

void uart_write(unsigned char data)
{
	while (!(UCSR1A & (1 << UDRE1)));
  be:	eb e9       	ldi	r30, 0x9B	; 155
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	90 81       	ld	r25, Z
  c4:	95 ff       	sbrs	r25, 5
  c6:	fd cf       	rjmp	.-6      	; 0xc2 <uart_write+0x4>
	UDR1 = data;
  c8:	80 93 9c 00 	sts	0x009C, r24
  cc:	08 95       	ret

000000ce <main>:
}

int main(){
	uart_init(BAUDRATE(9600));
  ce:	87 e6       	ldi	r24, 0x67	; 103
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	e5 df       	rcall	.-54     	; 0x9e <uart_init>
	DDRE = 0xFF;
  d4:	8f ef       	ldi	r24, 0xFF	; 255
  d6:	82 b9       	out	0x02, r24	; 2
	DDRA = 0x00;
  d8:	1a ba       	out	0x1a, r1	; 26
	DDRB = 0xFF;  // OC0(PB4)출력설정
  da:	87 bb       	out	0x17, r24	; 23
	TCCR0 = 0x7A;    // fast PWM mode : 3,6(WGM01,00) - 11, 5,4(COM ) - 11, 2-0(CS) - 010
  dc:	9a e7       	ldi	r25, 0x7A	; 122
  de:	93 bf       	out	0x33, r25	; 51
	OCR0 = 0xFF;
  e0:	81 bf       	out	0x31, r24	; 49
	
	PORTE = BV(0);
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	83 b9       	out	0x03, r24	; 3
				OCR0 = 0x80;
				PORTE = BV(1);
				uart_write('1');
				break;
			case '2':
				OCR0 = 0x6F;
  e6:	0f 2e       	mov	r0, r31
  e8:	ff e6       	ldi	r31, 0x6F	; 111
  ea:	9f 2e       	mov	r9, r31
  ec:	f0 2d       	mov	r31, r0
				PORTE = BV(2);
  ee:	68 94       	set
  f0:	aa 24       	eor	r10, r10
  f2:	a2 f8       	bld	r10, 2
				OCR0 = 0x4F;
				PORTE = BV(3);
				uart_write('3');
				break;
			case '4':
				OCR0 = 0x30;
  f4:	c0 e3       	ldi	r28, 0x30	; 48
				PORTE = BV(4);
  f6:	68 94       	set
  f8:	bb 24       	eor	r11, r11
  fa:	b4 f8       	bld	r11, 4
				OCR0 = 0x6F;
				PORTE = BV(2);
				uart_write('2');
				break;
			case '3':
				OCR0 = 0x4F;
  fc:	0f 2e       	mov	r0, r31
  fe:	ff e4       	ldi	r31, 0x4F	; 79
 100:	cf 2e       	mov	r12, r31
 102:	f0 2d       	mov	r31, r0
				PORTE = BV(3);
 104:	68 94       	set
 106:	dd 24       	eor	r13, r13
 108:	d3 f8       	bld	r13, 3
				uart_write('4');
				break;
			
			case '5':
				OCR0 = 0x00;
				PORTE = BV(5);
 10a:	68 94       	set
 10c:	ee 24       	eor	r14, r14
 10e:	e5 f8       	bld	r14, 5
	while(1)
	{
		unsigned char num = uart_read();
		switch(num){
			case '0':
				OCR0 = 0xFF;
 110:	ff 24       	eor	r15, r15
 112:	fa 94       	dec	r15
				PORTE = BV(0);
 114:	01 e0       	ldi	r16, 0x01	; 1
				uart_write('0');
				break;
			case '1':
				OCR0 = 0x80;
 116:	10 e8       	ldi	r17, 0x80	; 128
				PORTE = BV(1);
 118:	d2 e0       	ldi	r29, 0x02	; 2
	OCR0 = 0xFF;
	
	PORTE = BV(0);
	while(1)
	{
		unsigned char num = uart_read();
 11a:	c9 df       	rcall	.-110    	; 0xae <uart_read>
		switch(num){
 11c:	82 33       	cpi	r24, 0x32	; 50
 11e:	b1 f0       	breq	.+44     	; 0x14c <main+0x7e>
 120:	28 f4       	brcc	.+10     	; 0x12c <main+0x5e>
 122:	80 33       	cpi	r24, 0x30	; 48
 124:	49 f0       	breq	.+18     	; 0x138 <main+0x6a>
 126:	81 33       	cpi	r24, 0x31	; 49
 128:	61 f0       	breq	.+24     	; 0x142 <main+0x74>
 12a:	f7 cf       	rjmp	.-18     	; 0x11a <main+0x4c>
 12c:	84 33       	cpi	r24, 0x34	; 52
 12e:	c1 f0       	breq	.+48     	; 0x160 <main+0x92>
 130:	90 f0       	brcs	.+36     	; 0x156 <main+0x88>
 132:	85 33       	cpi	r24, 0x35	; 53
 134:	d1 f0       	breq	.+52     	; 0x16a <main+0x9c>
 136:	f1 cf       	rjmp	.-30     	; 0x11a <main+0x4c>
			case '0':
				OCR0 = 0xFF;
 138:	f1 be       	out	0x31, r15	; 49
				PORTE = BV(0);
 13a:	03 b9       	out	0x03, r16	; 3
				uart_write('0');
 13c:	8c 2f       	mov	r24, r28
 13e:	bf df       	rcall	.-130    	; 0xbe <uart_write>
				break;
 140:	ec cf       	rjmp	.-40     	; 0x11a <main+0x4c>
			case '1':
				OCR0 = 0x80;
 142:	11 bf       	out	0x31, r17	; 49
				PORTE = BV(1);
 144:	d3 b9       	out	0x03, r29	; 3
				uart_write('1');
 146:	81 e3       	ldi	r24, 0x31	; 49
 148:	ba df       	rcall	.-140    	; 0xbe <uart_write>
				break;
 14a:	e7 cf       	rjmp	.-50     	; 0x11a <main+0x4c>
			case '2':
				OCR0 = 0x6F;
 14c:	91 be       	out	0x31, r9	; 49
				PORTE = BV(2);
 14e:	a3 b8       	out	0x03, r10	; 3
				uart_write('2');
 150:	82 e3       	ldi	r24, 0x32	; 50
 152:	b5 df       	rcall	.-150    	; 0xbe <uart_write>
				break;
 154:	e2 cf       	rjmp	.-60     	; 0x11a <main+0x4c>
			case '3':
				OCR0 = 0x4F;
 156:	c1 be       	out	0x31, r12	; 49
				PORTE = BV(3);
 158:	d3 b8       	out	0x03, r13	; 3
				uart_write('3');
 15a:	83 e3       	ldi	r24, 0x33	; 51
 15c:	b0 df       	rcall	.-160    	; 0xbe <uart_write>
				break;
 15e:	dd cf       	rjmp	.-70     	; 0x11a <main+0x4c>
			case '4':
				OCR0 = 0x30;
 160:	c1 bf       	out	0x31, r28	; 49
				PORTE = BV(4);
 162:	b3 b8       	out	0x03, r11	; 3
				uart_write('4');
 164:	84 e3       	ldi	r24, 0x34	; 52
 166:	ab df       	rcall	.-170    	; 0xbe <uart_write>
				break;
 168:	d8 cf       	rjmp	.-80     	; 0x11a <main+0x4c>
			
			case '5':
				OCR0 = 0x00;
 16a:	11 be       	out	0x31, r1	; 49
				PORTE = BV(5);
 16c:	e3 b8       	out	0x03, r14	; 3
				uart_write('5');
 16e:	85 e3       	ldi	r24, 0x35	; 53
 170:	a6 df       	rcall	.-180    	; 0xbe <uart_write>
				break;
 172:	d3 cf       	rjmp	.-90     	; 0x11a <main+0x4c>

00000174 <_exit>:
 174:	f8 94       	cli

00000176 <__stop_program>:
 176:	ff cf       	rjmp	.-2      	; 0x176 <__stop_program>
